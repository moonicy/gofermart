// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/moonicy/gofermart/internal/models"
)

// MovementsStorage is an autogenerated mock type for the MovementsStorage type
type MovementsStorage struct {
	mock.Mock
}

type MovementsStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MovementsStorage) EXPECT() *MovementsStorage_Expecter {
	return &MovementsStorage_Expecter{mock: &_m.Mock}
}

// GetMovements provides a mock function with given fields: ctx, userID
func (_m *MovementsStorage) GetMovements(ctx context.Context, userID int) ([]models.Movement, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetMovements")
	}

	var r0 []models.Movement
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]models.Movement, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []models.Movement); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Movement)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MovementsStorage_GetMovements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMovements'
type MovementsStorage_GetMovements_Call struct {
	*mock.Call
}

// GetMovements is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
func (_e *MovementsStorage_Expecter) GetMovements(ctx interface{}, userID interface{}) *MovementsStorage_GetMovements_Call {
	return &MovementsStorage_GetMovements_Call{Call: _e.mock.On("GetMovements", ctx, userID)}
}

func (_c *MovementsStorage_GetMovements_Call) Run(run func(ctx context.Context, userID int)) *MovementsStorage_GetMovements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MovementsStorage_GetMovements_Call) Return(_a0 []models.Movement, _a1 error) *MovementsStorage_GetMovements_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MovementsStorage_GetMovements_Call) RunAndReturn(run func(context.Context, int) ([]models.Movement, error)) *MovementsStorage_GetMovements_Call {
	_c.Call.Return(run)
	return _c
}

// MakeWithdraw provides a mock function with given fields: ctx, movement
func (_m *MovementsStorage) MakeWithdraw(ctx context.Context, movement models.Movement) error {
	ret := _m.Called(ctx, movement)

	if len(ret) == 0 {
		panic("no return value specified for MakeWithdraw")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Movement) error); ok {
		r0 = rf(ctx, movement)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MovementsStorage_MakeWithdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeWithdraw'
type MovementsStorage_MakeWithdraw_Call struct {
	*mock.Call
}

// MakeWithdraw is a helper method to define mock.On call
//   - ctx context.Context
//   - movement models.Movement
func (_e *MovementsStorage_Expecter) MakeWithdraw(ctx interface{}, movement interface{}) *MovementsStorage_MakeWithdraw_Call {
	return &MovementsStorage_MakeWithdraw_Call{Call: _e.mock.On("MakeWithdraw", ctx, movement)}
}

func (_c *MovementsStorage_MakeWithdraw_Call) Run(run func(ctx context.Context, movement models.Movement)) *MovementsStorage_MakeWithdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Movement))
	})
	return _c
}

func (_c *MovementsStorage_MakeWithdraw_Call) Return(_a0 error) *MovementsStorage_MakeWithdraw_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MovementsStorage_MakeWithdraw_Call) RunAndReturn(run func(context.Context, models.Movement) error) *MovementsStorage_MakeWithdraw_Call {
	_c.Call.Return(run)
	return _c
}

// NewMovementsStorage creates a new instance of MovementsStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMovementsStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MovementsStorage {
	mock := &MovementsStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
