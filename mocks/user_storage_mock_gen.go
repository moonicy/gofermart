// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/moonicy/gofermart/internal/models"
)

// UsersStorage is an autogenerated mock type for the UsersStorage type
type UsersStorage struct {
	mock.Mock
}

type UsersStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *UsersStorage) EXPECT() *UsersStorage_Expecter {
	return &UsersStorage_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UsersStorage) CreateUser(ctx context.Context, user models.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersStorage_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UsersStorage_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user models.User
func (_e *UsersStorage_Expecter) CreateUser(ctx interface{}, user interface{}) *UsersStorage_CreateUser_Call {
	return &UsersStorage_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *UsersStorage_CreateUser_Call) Run(run func(ctx context.Context, user models.User)) *UsersStorage_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *UsersStorage_CreateUser_Call) Return(_a0 error) *UsersStorage_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UsersStorage_CreateUser_Call) RunAndReturn(run func(context.Context, models.User) error) *UsersStorage_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: ctx, login
func (_m *UsersStorage) GetUser(ctx context.Context, login string) (models.User, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.User, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.User); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersStorage_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type UsersStorage_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
func (_e *UsersStorage_Expecter) GetUser(ctx interface{}, login interface{}) *UsersStorage_GetUser_Call {
	return &UsersStorage_GetUser_Call{Call: _e.mock.On("GetUser", ctx, login)}
}

func (_c *UsersStorage_GetUser_Call) Run(run func(ctx context.Context, login string)) *UsersStorage_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UsersStorage_GetUser_Call) Return(_a0 models.User, _a1 error) *UsersStorage_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersStorage_GetUser_Call) RunAndReturn(run func(context.Context, string) (models.User, error)) *UsersStorage_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// SetToken provides a mock function with given fields: ctx, user
func (_m *UsersStorage) SetToken(ctx context.Context, user models.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for SetToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersStorage_SetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetToken'
type UsersStorage_SetToken_Call struct {
	*mock.Call
}

// SetToken is a helper method to define mock.On call
//   - ctx context.Context
//   - user models.User
func (_e *UsersStorage_Expecter) SetToken(ctx interface{}, user interface{}) *UsersStorage_SetToken_Call {
	return &UsersStorage_SetToken_Call{Call: _e.mock.On("SetToken", ctx, user)}
}

func (_c *UsersStorage_SetToken_Call) Run(run func(ctx context.Context, user models.User)) *UsersStorage_SetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.User))
	})
	return _c
}

func (_c *UsersStorage_SetToken_Call) Return(_a0 error) *UsersStorage_SetToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UsersStorage_SetToken_Call) RunAndReturn(run func(context.Context, models.User) error) *UsersStorage_SetToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewUsersStorage creates a new instance of UsersStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsersStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsersStorage {
	mock := &UsersStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
