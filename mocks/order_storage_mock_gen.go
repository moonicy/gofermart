// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/moonicy/gofermart/internal/models"
)

// OrdersStorage is an autogenerated mock type for the OrdersStorage type
type OrdersStorage struct {
	mock.Mock
}

type OrdersStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *OrdersStorage) EXPECT() *OrdersStorage_Expecter {
	return &OrdersStorage_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *OrdersStorage) CreateOrder(ctx context.Context, order models.Order) error {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrdersStorage_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type OrdersStorage_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - order models.Order
func (_e *OrdersStorage_Expecter) CreateOrder(ctx interface{}, order interface{}) *OrdersStorage_CreateOrder_Call {
	return &OrdersStorage_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, order)}
}

func (_c *OrdersStorage_CreateOrder_Call) Run(run func(ctx context.Context, order models.Order)) *OrdersStorage_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Order))
	})
	return _c
}

func (_c *OrdersStorage_CreateOrder_Call) Return(_a0 error) *OrdersStorage_CreateOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrdersStorage_CreateOrder_Call) RunAndReturn(run func(context.Context, models.Order) error) *OrdersStorage_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrder provides a mock function with given fields: ctx, number
func (_m *OrdersStorage) GetOrder(ctx context.Context, number string) (models.Order, error) {
	ret := _m.Called(ctx, number)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Order, error)); ok {
		return rf(ctx, number)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Order); ok {
		r0 = rf(ctx, number)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersStorage_GetOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrder'
type OrdersStorage_GetOrder_Call struct {
	*mock.Call
}

// GetOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - number string
func (_e *OrdersStorage_Expecter) GetOrder(ctx interface{}, number interface{}) *OrdersStorage_GetOrder_Call {
	return &OrdersStorage_GetOrder_Call{Call: _e.mock.On("GetOrder", ctx, number)}
}

func (_c *OrdersStorage_GetOrder_Call) Run(run func(ctx context.Context, number string)) *OrdersStorage_GetOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OrdersStorage_GetOrder_Call) Return(_a0 models.Order, _a1 error) *OrdersStorage_GetOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersStorage_GetOrder_Call) RunAndReturn(run func(context.Context, string) (models.Order, error)) *OrdersStorage_GetOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrders provides a mock function with given fields: ctx, userID
func (_m *OrdersStorage) GetOrders(ctx context.Context, userID int) ([]models.Order, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 []models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]models.Order, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []models.Order); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersStorage_GetOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrders'
type OrdersStorage_GetOrders_Call struct {
	*mock.Call
}

// GetOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
func (_e *OrdersStorage_Expecter) GetOrders(ctx interface{}, userID interface{}) *OrdersStorage_GetOrders_Call {
	return &OrdersStorage_GetOrders_Call{Call: _e.mock.On("GetOrders", ctx, userID)}
}

func (_c *OrdersStorage_GetOrders_Call) Run(run func(ctx context.Context, userID int)) *OrdersStorage_GetOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *OrdersStorage_GetOrders_Call) Return(_a0 []models.Order, _a1 error) *OrdersStorage_GetOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrdersStorage_GetOrders_Call) RunAndReturn(run func(context.Context, int) ([]models.Order, error)) *OrdersStorage_GetOrders_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrdersStorage creates a new instance of OrdersStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrdersStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrdersStorage {
	mock := &OrdersStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
